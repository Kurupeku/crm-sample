import { gql } from '@apollo/client';
import * as Apollo from '@apollo/client';
export type Maybe<T> = T | null;
export type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };
const defaultOptions =  {}
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: string;
  String: string;
  Boolean: boolean;
  Int: number;
  Float: number;
};

export type Address = {
  __typename?: 'Address';
  building?: Maybe<Scalars['String']>;
  city: Scalars['String'];
  createdAt: Scalars['Int'];
  fullAddress: Scalars['String'];
  fullAddressWithPostalCode: Scalars['String'];
  id: Scalars['ID'];
  postalCode: Scalars['String'];
  prefecture: Scalars['String'];
  street: Scalars['String'];
  updatedAt: Scalars['Int'];
  userId: Scalars['Int'];
};

/** Autogenerated input type of ChangeProgressRank */
export type ChangeProgressRankInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  id: Scalars['ID'];
  rank: ProgressRankEnum;
};

/** Autogenerated input type of ChangeProgressRecontactedOn */
export type ChangeProgressRecontactedOnInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  id: Scalars['ID'];
  recontactedOn: Scalars['String'];
};

/** Autogenerated input type of ChangeProgressStaff */
export type ChangeProgressStaffInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  id: Scalars['ID'];
  staffId: Scalars['Int'];
};

/** Autogenerated input type of ChangeProgressState */
export type ChangeProgressStateInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  event: ProgressEventEnum;
  id: Scalars['ID'];
};

export type Comment = {
  __typename?: 'Comment';
  content: Scalars['String'];
  createdAt: Scalars['Int'];
  id: Scalars['ID'];
  inquiry: Inquiry;
  inquiryId: Scalars['Int'];
  staff?: Maybe<Staff>;
  updatedAt: Scalars['Int'];
  user?: Maybe<User>;
  userId: Scalars['Int'];
};

export type CommentsList = {
  __typename?: 'CommentsList';
  comments: Array<Comment>;
  pageInfo: PageInfo;
};

export type CreateAddressInput = {
  building?: Maybe<Scalars['String']>;
  city: Scalars['String'];
  postalCode: Scalars['String'];
  prefecture: Scalars['String'];
  street: Scalars['String'];
};

/** Autogenerated input type of CreateComment */
export type CreateCommentInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  content: Scalars['String'];
  inquiryId: Scalars['Int'];
  staffId: Scalars['Int'];
};

/** Autogenerated input type of CreateInquiry */
export type CreateInquiryInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  companyName?: Maybe<Scalars['String']>;
  detail?: Maybe<Scalars['String']>;
  email: Scalars['String'];
  introductoryTerm: Scalars['String'];
  menuIds?: Maybe<Array<Scalars['Int']>>;
  name: Scalars['String'];
  numberOfUsers: Scalars['Int'];
  progress?: Maybe<CreateProgressInput>;
  tel: Scalars['String'];
  userId?: Maybe<Scalars['Int']>;
};

/** Autogenerated input type of CreateMenu */
export type CreateMenuInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  name: Scalars['String'];
  publishedOn?: Maybe<Scalars['String']>;
};

export type CreateProgressInput = {
  rank: Scalars['Int'];
  staffId?: Maybe<Scalars['Int']>;
};

/** Autogenerated input type of CreateUser */
export type CreateUserInput = {
  address: CreateAddressInput;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  companyName?: Maybe<Scalars['String']>;
  email: Scalars['String'];
  name: Scalars['String'];
  tel: Scalars['String'];
};

/** Autogenerated input type of DeleteComment */
export type DeleteCommentInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  id: Scalars['ID'];
};

/** Autogenerated input type of DeleteInquiry */
export type DeleteInquiryInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  id: Scalars['ID'];
};

/** Autogenerated input type of DeleteMenu */
export type DeleteMenuInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  id: Scalars['ID'];
};

/** Autogenerated input type of DeleteUser */
export type DeleteUserInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  id: Scalars['ID'];
};

export type InquiriesList = {
  __typename?: 'InquiriesList';
  inquiries: Array<Inquiry>;
  pageInfo: PageInfo;
};

export type Inquiry = {
  __typename?: 'Inquiry';
  comments: Array<Comment>;
  companyName?: Maybe<Scalars['String']>;
  createdAt: Scalars['Int'];
  detail?: Maybe<Scalars['String']>;
  email: Scalars['String'];
  id: Scalars['ID'];
  introductoryTerm: Scalars['String'];
  menus: Array<Menu>;
  name: Scalars['String'];
  numberOfUsers: Scalars['Int'];
  progress: Progress;
  tel: Scalars['String'];
  updatedAt: Scalars['Int'];
  user?: Maybe<User>;
  userId?: Maybe<Scalars['Int']>;
};

export type Menu = {
  __typename?: 'Menu';
  createdAt: Scalars['Int'];
  id: Scalars['ID'];
  inquiries: Array<Inquiry>;
  name: Scalars['String'];
  publishedOn?: Maybe<Scalars['String']>;
  updatedAt: Scalars['Int'];
};

export type MenusList = {
  __typename?: 'MenusList';
  menus: Array<Menu>;
  pageInfo: PageInfo;
};

export type Mutation = {
  __typename?: 'Mutation';
  changeProgressRank?: Maybe<Progress>;
  changeProgressRecontactedOn?: Maybe<Progress>;
  changeProgressStaff?: Maybe<Progress>;
  changeProgressState?: Maybe<Progress>;
  changeStaffPassword: Staff;
  createComment?: Maybe<Comment>;
  createInquiry?: Maybe<Inquiry>;
  createMenu?: Maybe<Menu>;
  createStaff: Staff;
  createUser?: Maybe<User>;
  deleteComment?: Maybe<Comment>;
  deleteInquiry?: Maybe<Inquiry>;
  deleteMenu?: Maybe<Menu>;
  deleteStaff: Staff;
  deleteStaffIcon: Staff;
  deleteUser?: Maybe<User>;
  updateComment?: Maybe<Comment>;
  updateInquiry?: Maybe<Inquiry>;
  updateMenu?: Maybe<Menu>;
  updateStaff: Staff;
  updateUser?: Maybe<User>;
  uploadStaffIcon: Staff;
};


export type MutationChangeProgressRankArgs = {
  input: ChangeProgressRankInput;
};


export type MutationChangeProgressRecontactedOnArgs = {
  input: ChangeProgressRecontactedOnInput;
};


export type MutationChangeProgressStaffArgs = {
  input: ChangeProgressStaffInput;
};


export type MutationChangeProgressStateArgs = {
  input: ChangeProgressStateInput;
};


export type MutationChangeStaffPasswordArgs = {
  input?: Maybe<StaffChangePasswordInput>;
};


export type MutationCreateCommentArgs = {
  input: CreateCommentInput;
};


export type MutationCreateInquiryArgs = {
  input: CreateInquiryInput;
};


export type MutationCreateMenuArgs = {
  input: CreateMenuInput;
};


export type MutationCreateStaffArgs = {
  input?: Maybe<NewStaffInput>;
};


export type MutationCreateUserArgs = {
  input: CreateUserInput;
};


export type MutationDeleteCommentArgs = {
  input: DeleteCommentInput;
};


export type MutationDeleteInquiryArgs = {
  input: DeleteInquiryInput;
};


export type MutationDeleteMenuArgs = {
  input: DeleteMenuInput;
};


export type MutationDeleteStaffArgs = {
  input?: Maybe<StaffIdInput>;
};


export type MutationDeleteStaffIconArgs = {
  input?: Maybe<StaffIdInput>;
};


export type MutationDeleteUserArgs = {
  input: DeleteUserInput;
};


export type MutationUpdateCommentArgs = {
  input: UpdateCommentInput;
};


export type MutationUpdateInquiryArgs = {
  input: UpdateInquiryInput;
};


export type MutationUpdateMenuArgs = {
  input: UpdateMenuInput;
};


export type MutationUpdateStaffArgs = {
  input?: Maybe<StaffInput>;
};


export type MutationUpdateUserArgs = {
  input: UpdateUserInput;
};


export type MutationUploadStaffIconArgs = {
  input?: Maybe<StaffIconInput>;
};

export type NewStaffInput = {
  email: Scalars['String'];
  name: Scalars['String'];
  password: Scalars['String'];
};

export type PageInfo = {
  __typename?: 'PageInfo';
  currentPage: Scalars['Int'];
  limit: Scalars['Int'];
  pagesCount: Scalars['Int'];
  recordsCount: Scalars['Int'];
};

export type Progress = {
  __typename?: 'Progress';
  contactedAt?: Maybe<Scalars['Int']>;
  createdAt: Scalars['Int'];
  id: Scalars['ID'];
  inquiry: Inquiry;
  inquiryId: Scalars['Int'];
  rank: Scalars['String'];
  rankI18n: Scalars['String'];
  recontactedOn?: Maybe<Scalars['String']>;
  selectableEvents: Array<ProgressEvent>;
  staff?: Maybe<Staff>;
  staffId?: Maybe<Scalars['Int']>;
  state?: Maybe<Scalars['String']>;
  stateI18n?: Maybe<Scalars['String']>;
  updatedAt: Scalars['Int'];
};

export type ProgressEvent = {
  __typename?: 'ProgressEvent';
  event: Scalars['String'];
  label: Scalars['String'];
};

export enum ProgressEventEnum {
  Archive = 'archive',
  Contact = 'contact',
  Contacted = 'contacted',
  Order = 'order',
  Recontact = 'recontact'
}

export enum ProgressRankEnum {
  A = 'a',
  B = 'b',
  C = 'c',
  D = 'd'
}

export enum ProgressStateEnum {
  Archived = 'archived',
  Contacting = 'contacting',
  Estimating = 'estimating',
  Ordered = 'ordered',
  Waiting = 'waiting',
  WaitingRecontact = 'waiting_recontact'
}

export type ProgressesList = {
  __typename?: 'ProgressesList';
  pageInfo: PageInfo;
  progresses: Array<Progress>;
};

export type Query = {
  __typename?: 'Query';
  comment?: Maybe<Comment>;
  comments: Array<Comment>;
  commentsList: CommentsList;
  inquiries: Array<Inquiry>;
  inquiriesList: InquiriesList;
  inquiry?: Maybe<Inquiry>;
  menu?: Maybe<Menu>;
  menus: Array<Menu>;
  menusList: MenusList;
  progress?: Maybe<Progress>;
  progresses: Array<Progress>;
  progressesList: ProgressesList;
  staff: Staff;
  staffByEmail: Staff;
  staffs: Array<Staff>;
  staffsList: StaffsList;
  user?: Maybe<User>;
  users: Array<User>;
  usersList: UsersList;
};


export type QueryCommentArgs = {
  id: Scalars['ID'];
};


export type QueryCommentsArgs = {
  inquiryId?: Maybe<Scalars['Int']>;
  order?: Maybe<Scalars['String']>;
};


export type QueryCommentsListArgs = {
  order?: Maybe<Scalars['String']>;
  page?: Maybe<Scalars['Int']>;
  per?: Maybe<Scalars['Int']>;
};


export type QueryInquiriesArgs = {
  fieldsCont?: Maybe<Scalars['String']>;
  order?: Maybe<Scalars['String']>;
  staffId?: Maybe<Scalars['Int']>;
};


export type QueryInquiriesListArgs = {
  fieldsCont?: Maybe<Scalars['String']>;
  order?: Maybe<Scalars['String']>;
  page?: Maybe<Scalars['Int']>;
  per?: Maybe<Scalars['Int']>;
  staffId?: Maybe<Scalars['Int']>;
  state?: Maybe<ProgressStateEnum>;
};


export type QueryInquiryArgs = {
  id: Scalars['ID'];
};


export type QueryMenuArgs = {
  id: Scalars['ID'];
};


export type QueryMenusArgs = {
  order?: Maybe<Scalars['String']>;
};


export type QueryMenusListArgs = {
  order?: Maybe<Scalars['String']>;
  page?: Maybe<Scalars['Int']>;
  per?: Maybe<Scalars['Int']>;
};


export type QueryProgressArgs = {
  id: Scalars['ID'];
};


export type QueryProgressesArgs = {
  order?: Maybe<Scalars['String']>;
  rank?: Maybe<ProgressRankEnum>;
  staffId?: Maybe<Scalars['Int']>;
  state?: Maybe<ProgressStateEnum>;
};


export type QueryProgressesListArgs = {
  order?: Maybe<Scalars['String']>;
  page?: Maybe<Scalars['Int']>;
  per?: Maybe<Scalars['Int']>;
  rank?: Maybe<ProgressRankEnum>;
  staffId?: Maybe<Scalars['Int']>;
  state?: Maybe<ProgressStateEnum>;
};


export type QueryStaffArgs = {
  id: Scalars['ID'];
};


export type QueryStaffByEmailArgs = {
  email: Scalars['String'];
};


export type QueryStaffsListArgs = {
  page?: Maybe<Scalars['Int']>;
  per?: Maybe<Scalars['Int']>;
};


export type QueryUserArgs = {
  id: Scalars['Int'];
};


export type QueryUsersArgs = {
  fieldsCont?: Maybe<Scalars['String']>;
  order?: Maybe<Scalars['String']>;
};


export type QueryUsersListArgs = {
  fieldsCont?: Maybe<Scalars['String']>;
  order?: Maybe<Scalars['String']>;
  page?: Maybe<Scalars['Int']>;
  per?: Maybe<Scalars['Int']>;
};

export type Staff = {
  __typename?: 'Staff';
  comments: Array<Comment>;
  createdAt: Scalars['String'];
  email: Scalars['String'];
  icon?: Maybe<Scalars['String']>;
  id: Scalars['ID'];
  name: Scalars['String'];
  progresses: Array<Progress>;
  updatedAt: Scalars['String'];
};

export type StaffChangePasswordInput = {
  id: Scalars['ID'];
  newPassword: Scalars['String'];
  password: Scalars['String'];
};

export type StaffIdInput = {
  id: Scalars['ID'];
};

export type StaffIconInput = {
  icon: Scalars['String'];
  id: Scalars['ID'];
};

export type StaffInput = {
  email?: Maybe<Scalars['String']>;
  id: Scalars['ID'];
  name?: Maybe<Scalars['String']>;
};

export type StaffPageInfo = {
  __typename?: 'StaffPageInfo';
  currentPage: Scalars['Int'];
  limit: Scalars['Int'];
  pagesCount: Scalars['Int'];
  recordsCount: Scalars['Int'];
};

export type StaffsList = {
  __typename?: 'StaffsList';
  pageInfo: StaffPageInfo;
  staffs: Array<Staff>;
};

export type UpdateAddressInput = {
  building?: Maybe<Scalars['String']>;
  city: Scalars['String'];
  postalCode: Scalars['String'];
  prefecture: Scalars['String'];
  street: Scalars['String'];
};

/** Autogenerated input type of UpdateComment */
export type UpdateCommentInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  content: Scalars['String'];
  id: Scalars['ID'];
};

/** Autogenerated input type of UpdateInquiry */
export type UpdateInquiryInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  companyName?: Maybe<Scalars['String']>;
  detail?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  id: Scalars['ID'];
  introductoryTerm?: Maybe<Scalars['String']>;
  menuIds?: Maybe<Array<Scalars['Int']>>;
  name?: Maybe<Scalars['String']>;
  numberOfUsers?: Maybe<Scalars['Int']>;
  progress?: Maybe<UpdateProgressInput>;
  tel?: Maybe<Scalars['String']>;
  userId?: Maybe<Scalars['Int']>;
};

/** Autogenerated input type of UpdateMenu */
export type UpdateMenuInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  id: Scalars['ID'];
  name?: Maybe<Scalars['String']>;
  publishedOn?: Maybe<Scalars['String']>;
};

export type UpdateProgressInput = {
  rank: Scalars['Int'];
  staffId?: Maybe<Scalars['Int']>;
};

/** Autogenerated input type of UpdateUser */
export type UpdateUserInput = {
  address?: Maybe<UpdateAddressInput>;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  companyName?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  id: Scalars['ID'];
  name?: Maybe<Scalars['String']>;
  tel?: Maybe<Scalars['String']>;
};

export type User = {
  __typename?: 'User';
  address: Address;
  comments: Array<Comment>;
  companyName?: Maybe<Scalars['String']>;
  createdAt: Scalars['Int'];
  email: Scalars['String'];
  id: Scalars['ID'];
  inquiries: Array<Inquiry>;
  name: Scalars['String'];
  tel: Scalars['String'];
  updatedAt: Scalars['Int'];
};

export type UsersList = {
  __typename?: 'UsersList';
  pageInfo: PageInfo;
  users: Array<User>;
};

export type CreateStaffMutationVariables = Exact<{
  input?: Maybe<NewStaffInput>;
}>;


export type CreateStaffMutation = { __typename?: 'Mutation', createStaff: { __typename?: 'Staff', id: string } };

export type UpdateStaffMutationVariables = Exact<{
  input?: Maybe<StaffInput>;
}>;


export type UpdateStaffMutation = { __typename?: 'Mutation', updateStaff: { __typename?: 'Staff', id: string } };

export type DeleteStaffMutationVariables = Exact<{
  input?: Maybe<StaffIdInput>;
}>;


export type DeleteStaffMutation = { __typename?: 'Mutation', deleteStaff: { __typename?: 'Staff', id: string } };

export type CreateUserMutationVariables = Exact<{
  input: CreateUserInput;
}>;


export type CreateUserMutation = { __typename?: 'Mutation', createUser?: { __typename?: 'User', id: string } | null | undefined };

export type UpdateUserMutationVariables = Exact<{
  input: UpdateUserInput;
}>;


export type UpdateUserMutation = { __typename?: 'Mutation', updateUser?: { __typename?: 'User', id: string } | null | undefined };

export type DeleteUserMutationVariables = Exact<{
  input: DeleteUserInput;
}>;


export type DeleteUserMutation = { __typename?: 'Mutation', deleteUser?: { __typename?: 'User', id: string } | null | undefined };

export type CreateInquiryMutationVariables = Exact<{
  input: CreateInquiryInput;
}>;


export type CreateInquiryMutation = { __typename?: 'Mutation', createInquiry?: { __typename?: 'Inquiry', id: string } | null | undefined };

export type UpdateInquiryMutationVariables = Exact<{
  input: UpdateInquiryInput;
}>;


export type UpdateInquiryMutation = { __typename?: 'Mutation', updateInquiry?: { __typename?: 'Inquiry', id: string } | null | undefined };

export type DeleteInquiryMutationVariables = Exact<{
  input: DeleteInquiryInput;
}>;


export type DeleteInquiryMutation = { __typename?: 'Mutation', deleteInquiry?: { __typename?: 'Inquiry', id: string } | null | undefined };

export type ChangeProgressStaffMutationVariables = Exact<{
  input: ChangeProgressStaffInput;
}>;


export type ChangeProgressStaffMutation = { __typename?: 'Mutation', changeProgressStaff?: { __typename?: 'Progress', id: string } | null | undefined };

export type ChangeProgressRankMutationVariables = Exact<{
  input: ChangeProgressRankInput;
}>;


export type ChangeProgressRankMutation = { __typename?: 'Mutation', changeProgressRank?: { __typename?: 'Progress', id: string } | null | undefined };

export type ChangeProgressStateMutationVariables = Exact<{
  input: ChangeProgressStateInput;
}>;


export type ChangeProgressStateMutation = { __typename?: 'Mutation', changeProgressState?: { __typename?: 'Progress', id: string } | null | undefined };

export type CreateCommentMutationVariables = Exact<{
  input: CreateCommentInput;
}>;


export type CreateCommentMutation = { __typename?: 'Mutation', createComment?: { __typename?: 'Comment', id: string } | null | undefined };

export type UpdateCommentMutationVariables = Exact<{
  input: UpdateCommentInput;
}>;


export type UpdateCommentMutation = { __typename?: 'Mutation', updateComment?: { __typename?: 'Comment', id: string } | null | undefined };

export type DeleteCommentMutationVariables = Exact<{
  input: DeleteCommentInput;
}>;


export type DeleteCommentMutation = { __typename?: 'Mutation', deleteComment?: { __typename?: 'Comment', id: string } | null | undefined };

export type ChangeProgressRecontactedOnMutationVariables = Exact<{
  input: ChangeProgressRecontactedOnInput;
}>;


export type ChangeProgressRecontactedOnMutation = { __typename?: 'Mutation', changeProgressRecontactedOn?: { __typename?: 'Progress', id: string } | null | undefined };

export type UploadStaffIconMutationVariables = Exact<{
  input?: Maybe<StaffIconInput>;
}>;


export type UploadStaffIconMutation = { __typename?: 'Mutation', uploadStaffIcon: { __typename?: 'Staff', id: string } };

export type DeleteStaffIconMutationVariables = Exact<{
  input?: Maybe<StaffIdInput>;
}>;


export type DeleteStaffIconMutation = { __typename?: 'Mutation', deleteStaffIcon: { __typename?: 'Staff', id: string } };

export type ChangeStaffPasswordMutationVariables = Exact<{
  input?: Maybe<StaffChangePasswordInput>;
}>;


export type ChangeStaffPasswordMutation = { __typename?: 'Mutation', changeStaffPassword: { __typename?: 'Staff', id: string } };

export type GetMenusOnlyNameQueryVariables = Exact<{ [key: string]: never; }>;


export type GetMenusOnlyNameQuery = { __typename?: 'Query', menus: Array<{ __typename?: 'Menu', id: string, name: string }> };

export type GetStaffsOnlyNameQueryVariables = Exact<{ [key: string]: never; }>;


export type GetStaffsOnlyNameQuery = { __typename?: 'Query', staffs: Array<{ __typename?: 'Staff', id: string, name: string }> };

export type GetStaffsListQueryVariables = Exact<{
  page?: Maybe<Scalars['Int']>;
  per?: Maybe<Scalars['Int']>;
}>;


export type GetStaffsListQuery = { __typename?: 'Query', staffsList: { __typename?: 'StaffsList', staffs: Array<{ __typename?: 'Staff', id: string, name: string, email: string, icon?: string | null | undefined, createdAt: string, updatedAt: string }>, pageInfo: { __typename?: 'StaffPageInfo', currentPage: number, limit: number, pagesCount: number, recordsCount: number } } };

export type GetStaffByIdQueryVariables = Exact<{
  id: Scalars['ID'];
}>;


export type GetStaffByIdQuery = { __typename?: 'Query', staff: { __typename?: 'Staff', id: string, name: string, email: string, icon?: string | null | undefined, createdAt: string, updatedAt: string } };

export type GetStaffbyEmailQueryVariables = Exact<{
  email: Scalars['String'];
}>;


export type GetStaffbyEmailQuery = { __typename?: 'Query', staffByEmail: { __typename?: 'Staff', id: string, name: string, email: string, icon?: string | null | undefined, createdAt: string, updatedAt: string } };

export type GetUsersListQueryVariables = Exact<{
  fieldsCont?: Maybe<Scalars['String']>;
  order?: Maybe<Scalars['String']>;
  page?: Maybe<Scalars['Int']>;
  per?: Maybe<Scalars['Int']>;
}>;


export type GetUsersListQuery = { __typename?: 'Query', usersList: { __typename?: 'UsersList', pageInfo: { __typename?: 'PageInfo', currentPage: number, limit: number, pagesCount: number, recordsCount: number }, users: Array<{ __typename?: 'User', id: string, companyName?: string | null | undefined, name: string, email: string, tel: string, createdAt: number, updatedAt: number, address: { __typename?: 'Address', postalCode: string, prefecture: string, city: string, street: string, building?: string | null | undefined, createdAt: number, updatedAt: number } }> } };

export type GetUserByIdQueryVariables = Exact<{
  userId: Scalars['Int'];
}>;


export type GetUserByIdQuery = { __typename?: 'Query', user?: { __typename?: 'User', id: string, companyName?: string | null | undefined, name: string, email: string, tel: string, createdAt: number, updatedAt: number, address: { __typename?: 'Address', id: string, postalCode: string, prefecture: string, city: string, street: string, building?: string | null | undefined, createdAt: number, updatedAt: number } } | null | undefined };

export type GetInquiriesListQueryVariables = Exact<{
  per?: Maybe<Scalars['Int']>;
  page?: Maybe<Scalars['Int']>;
  order?: Maybe<Scalars['String']>;
  fieldsCont?: Maybe<Scalars['String']>;
  staffId?: Maybe<Scalars['Int']>;
  state?: Maybe<ProgressStateEnum>;
}>;


export type GetInquiriesListQuery = { __typename?: 'Query', inquiriesList: { __typename?: 'InquiriesList', inquiries: Array<{ __typename?: 'Inquiry', id: string, userId?: number | null | undefined, companyName?: string | null | undefined, name: string, email: string, tel: string, numberOfUsers: number, introductoryTerm: string, detail?: string | null | undefined, createdAt: number, updatedAt: number, progress: { __typename?: 'Progress', id: string, inquiryId: number, staffId?: number | null | undefined, rank: string, rankI18n: string, state?: string | null | undefined, stateI18n?: string | null | undefined, recontactedOn?: string | null | undefined, contactedAt?: number | null | undefined, staff?: { __typename?: 'Staff', name: string } | null | undefined }, menus: Array<{ __typename?: 'Menu', id: string, name: string }> }>, pageInfo: { __typename?: 'PageInfo', currentPage: number, limit: number, pagesCount: number, recordsCount: number } } };

export type GetInquiryByIdQueryVariables = Exact<{
  inquiryId: Scalars['ID'];
}>;


export type GetInquiryByIdQuery = { __typename?: 'Query', inquiry?: { __typename?: 'Inquiry', id: string, userId?: number | null | undefined, companyName?: string | null | undefined, name: string, email: string, tel: string, numberOfUsers: number, introductoryTerm: string, detail?: string | null | undefined, createdAt: number, updatedAt: number, progress: { __typename?: 'Progress', id: string, inquiryId: number, staffId?: number | null | undefined, rank: string, rankI18n: string, state?: string | null | undefined, stateI18n?: string | null | undefined, recontactedOn?: string | null | undefined, contactedAt?: number | null | undefined, selectableEvents: Array<{ __typename?: 'ProgressEvent', event: string, label: string }>, staff?: { __typename?: 'Staff', id: string, name: string, icon?: string | null | undefined } | null | undefined }, menus: Array<{ __typename?: 'Menu', id: string, name: string }>, user?: { __typename?: 'User', id: string, companyName?: string | null | undefined, name: string, email: string, tel: string, address: { __typename?: 'Address', postalCode: string, prefecture: string, city: string, street: string, building?: string | null | undefined, createdAt: number, updatedAt: number } } | null | undefined } | null | undefined };

export type GetProgressStateAndEventsQueryVariables = Exact<{
  progressId: Scalars['ID'];
}>;


export type GetProgressStateAndEventsQuery = { __typename?: 'Query', progress?: { __typename?: 'Progress', id: string, state?: string | null | undefined, stateI18n?: string | null | undefined, selectableEvents: Array<{ __typename?: 'ProgressEvent', event: string, label: string }> } | null | undefined };

export type GetCommentsQueryVariables = Exact<{
  inquiryId?: Maybe<Scalars['Int']>;
  order?: Maybe<Scalars['String']>;
}>;


export type GetCommentsQuery = { __typename?: 'Query', comments: Array<{ __typename?: 'Comment', id: string, content: string, createdAt: number, staff?: { __typename?: 'Staff', id: string, name: string, icon?: string | null | undefined } | null | undefined }> };


export const CreateStaffDocument = gql`
    mutation createStaff($input: NewStaffInput) {
  createStaff(input: $input) {
    id
  }
}
    `;
export type CreateStaffMutationFn = Apollo.MutationFunction<CreateStaffMutation, CreateStaffMutationVariables>;

/**
 * __useCreateStaffMutation__
 *
 * To run a mutation, you first call `useCreateStaffMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useCreateStaffMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [createStaffMutation, { data, loading, error }] = useCreateStaffMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useCreateStaffMutation(baseOptions?: Apollo.MutationHookOptions<CreateStaffMutation, CreateStaffMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<CreateStaffMutation, CreateStaffMutationVariables>(CreateStaffDocument, options);
      }
export type CreateStaffMutationHookResult = ReturnType<typeof useCreateStaffMutation>;
export type CreateStaffMutationResult = Apollo.MutationResult<CreateStaffMutation>;
export type CreateStaffMutationOptions = Apollo.BaseMutationOptions<CreateStaffMutation, CreateStaffMutationVariables>;
export const UpdateStaffDocument = gql`
    mutation updateStaff($input: StaffInput) {
  updateStaff(input: $input) {
    id
  }
}
    `;
export type UpdateStaffMutationFn = Apollo.MutationFunction<UpdateStaffMutation, UpdateStaffMutationVariables>;

/**
 * __useUpdateStaffMutation__
 *
 * To run a mutation, you first call `useUpdateStaffMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUpdateStaffMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [updateStaffMutation, { data, loading, error }] = useUpdateStaffMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useUpdateStaffMutation(baseOptions?: Apollo.MutationHookOptions<UpdateStaffMutation, UpdateStaffMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<UpdateStaffMutation, UpdateStaffMutationVariables>(UpdateStaffDocument, options);
      }
export type UpdateStaffMutationHookResult = ReturnType<typeof useUpdateStaffMutation>;
export type UpdateStaffMutationResult = Apollo.MutationResult<UpdateStaffMutation>;
export type UpdateStaffMutationOptions = Apollo.BaseMutationOptions<UpdateStaffMutation, UpdateStaffMutationVariables>;
export const DeleteStaffDocument = gql`
    mutation deleteStaff($input: StaffIDInput) {
  deleteStaff(input: $input) {
    id
  }
}
    `;
export type DeleteStaffMutationFn = Apollo.MutationFunction<DeleteStaffMutation, DeleteStaffMutationVariables>;

/**
 * __useDeleteStaffMutation__
 *
 * To run a mutation, you first call `useDeleteStaffMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useDeleteStaffMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [deleteStaffMutation, { data, loading, error }] = useDeleteStaffMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useDeleteStaffMutation(baseOptions?: Apollo.MutationHookOptions<DeleteStaffMutation, DeleteStaffMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<DeleteStaffMutation, DeleteStaffMutationVariables>(DeleteStaffDocument, options);
      }
export type DeleteStaffMutationHookResult = ReturnType<typeof useDeleteStaffMutation>;
export type DeleteStaffMutationResult = Apollo.MutationResult<DeleteStaffMutation>;
export type DeleteStaffMutationOptions = Apollo.BaseMutationOptions<DeleteStaffMutation, DeleteStaffMutationVariables>;
export const CreateUserDocument = gql`
    mutation createUser($input: CreateUserInput!) {
  createUser(input: $input) {
    id
  }
}
    `;
export type CreateUserMutationFn = Apollo.MutationFunction<CreateUserMutation, CreateUserMutationVariables>;

/**
 * __useCreateUserMutation__
 *
 * To run a mutation, you first call `useCreateUserMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useCreateUserMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [createUserMutation, { data, loading, error }] = useCreateUserMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useCreateUserMutation(baseOptions?: Apollo.MutationHookOptions<CreateUserMutation, CreateUserMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<CreateUserMutation, CreateUserMutationVariables>(CreateUserDocument, options);
      }
export type CreateUserMutationHookResult = ReturnType<typeof useCreateUserMutation>;
export type CreateUserMutationResult = Apollo.MutationResult<CreateUserMutation>;
export type CreateUserMutationOptions = Apollo.BaseMutationOptions<CreateUserMutation, CreateUserMutationVariables>;
export const UpdateUserDocument = gql`
    mutation updateUser($input: UpdateUserInput!) {
  updateUser(input: $input) {
    id
  }
}
    `;
export type UpdateUserMutationFn = Apollo.MutationFunction<UpdateUserMutation, UpdateUserMutationVariables>;

/**
 * __useUpdateUserMutation__
 *
 * To run a mutation, you first call `useUpdateUserMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUpdateUserMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [updateUserMutation, { data, loading, error }] = useUpdateUserMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useUpdateUserMutation(baseOptions?: Apollo.MutationHookOptions<UpdateUserMutation, UpdateUserMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<UpdateUserMutation, UpdateUserMutationVariables>(UpdateUserDocument, options);
      }
export type UpdateUserMutationHookResult = ReturnType<typeof useUpdateUserMutation>;
export type UpdateUserMutationResult = Apollo.MutationResult<UpdateUserMutation>;
export type UpdateUserMutationOptions = Apollo.BaseMutationOptions<UpdateUserMutation, UpdateUserMutationVariables>;
export const DeleteUserDocument = gql`
    mutation deleteUser($input: DeleteUserInput!) {
  deleteUser(input: $input) {
    id
  }
}
    `;
export type DeleteUserMutationFn = Apollo.MutationFunction<DeleteUserMutation, DeleteUserMutationVariables>;

/**
 * __useDeleteUserMutation__
 *
 * To run a mutation, you first call `useDeleteUserMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useDeleteUserMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [deleteUserMutation, { data, loading, error }] = useDeleteUserMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useDeleteUserMutation(baseOptions?: Apollo.MutationHookOptions<DeleteUserMutation, DeleteUserMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<DeleteUserMutation, DeleteUserMutationVariables>(DeleteUserDocument, options);
      }
export type DeleteUserMutationHookResult = ReturnType<typeof useDeleteUserMutation>;
export type DeleteUserMutationResult = Apollo.MutationResult<DeleteUserMutation>;
export type DeleteUserMutationOptions = Apollo.BaseMutationOptions<DeleteUserMutation, DeleteUserMutationVariables>;
export const CreateInquiryDocument = gql`
    mutation createInquiry($input: CreateInquiryInput!) {
  createInquiry(input: $input) {
    id
  }
}
    `;
export type CreateInquiryMutationFn = Apollo.MutationFunction<CreateInquiryMutation, CreateInquiryMutationVariables>;

/**
 * __useCreateInquiryMutation__
 *
 * To run a mutation, you first call `useCreateInquiryMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useCreateInquiryMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [createInquiryMutation, { data, loading, error }] = useCreateInquiryMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useCreateInquiryMutation(baseOptions?: Apollo.MutationHookOptions<CreateInquiryMutation, CreateInquiryMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<CreateInquiryMutation, CreateInquiryMutationVariables>(CreateInquiryDocument, options);
      }
export type CreateInquiryMutationHookResult = ReturnType<typeof useCreateInquiryMutation>;
export type CreateInquiryMutationResult = Apollo.MutationResult<CreateInquiryMutation>;
export type CreateInquiryMutationOptions = Apollo.BaseMutationOptions<CreateInquiryMutation, CreateInquiryMutationVariables>;
export const UpdateInquiryDocument = gql`
    mutation updateInquiry($input: UpdateInquiryInput!) {
  updateInquiry(input: $input) {
    id
  }
}
    `;
export type UpdateInquiryMutationFn = Apollo.MutationFunction<UpdateInquiryMutation, UpdateInquiryMutationVariables>;

/**
 * __useUpdateInquiryMutation__
 *
 * To run a mutation, you first call `useUpdateInquiryMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUpdateInquiryMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [updateInquiryMutation, { data, loading, error }] = useUpdateInquiryMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useUpdateInquiryMutation(baseOptions?: Apollo.MutationHookOptions<UpdateInquiryMutation, UpdateInquiryMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<UpdateInquiryMutation, UpdateInquiryMutationVariables>(UpdateInquiryDocument, options);
      }
export type UpdateInquiryMutationHookResult = ReturnType<typeof useUpdateInquiryMutation>;
export type UpdateInquiryMutationResult = Apollo.MutationResult<UpdateInquiryMutation>;
export type UpdateInquiryMutationOptions = Apollo.BaseMutationOptions<UpdateInquiryMutation, UpdateInquiryMutationVariables>;
export const DeleteInquiryDocument = gql`
    mutation deleteInquiry($input: DeleteInquiryInput!) {
  deleteInquiry(input: $input) {
    id
  }
}
    `;
export type DeleteInquiryMutationFn = Apollo.MutationFunction<DeleteInquiryMutation, DeleteInquiryMutationVariables>;

/**
 * __useDeleteInquiryMutation__
 *
 * To run a mutation, you first call `useDeleteInquiryMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useDeleteInquiryMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [deleteInquiryMutation, { data, loading, error }] = useDeleteInquiryMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useDeleteInquiryMutation(baseOptions?: Apollo.MutationHookOptions<DeleteInquiryMutation, DeleteInquiryMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<DeleteInquiryMutation, DeleteInquiryMutationVariables>(DeleteInquiryDocument, options);
      }
export type DeleteInquiryMutationHookResult = ReturnType<typeof useDeleteInquiryMutation>;
export type DeleteInquiryMutationResult = Apollo.MutationResult<DeleteInquiryMutation>;
export type DeleteInquiryMutationOptions = Apollo.BaseMutationOptions<DeleteInquiryMutation, DeleteInquiryMutationVariables>;
export const ChangeProgressStaffDocument = gql`
    mutation changeProgressStaff($input: ChangeProgressStaffInput!) {
  changeProgressStaff(input: $input) {
    id
  }
}
    `;
export type ChangeProgressStaffMutationFn = Apollo.MutationFunction<ChangeProgressStaffMutation, ChangeProgressStaffMutationVariables>;

/**
 * __useChangeProgressStaffMutation__
 *
 * To run a mutation, you first call `useChangeProgressStaffMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useChangeProgressStaffMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [changeProgressStaffMutation, { data, loading, error }] = useChangeProgressStaffMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useChangeProgressStaffMutation(baseOptions?: Apollo.MutationHookOptions<ChangeProgressStaffMutation, ChangeProgressStaffMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<ChangeProgressStaffMutation, ChangeProgressStaffMutationVariables>(ChangeProgressStaffDocument, options);
      }
export type ChangeProgressStaffMutationHookResult = ReturnType<typeof useChangeProgressStaffMutation>;
export type ChangeProgressStaffMutationResult = Apollo.MutationResult<ChangeProgressStaffMutation>;
export type ChangeProgressStaffMutationOptions = Apollo.BaseMutationOptions<ChangeProgressStaffMutation, ChangeProgressStaffMutationVariables>;
export const ChangeProgressRankDocument = gql`
    mutation changeProgressRank($input: ChangeProgressRankInput!) {
  changeProgressRank(input: $input) {
    id
  }
}
    `;
export type ChangeProgressRankMutationFn = Apollo.MutationFunction<ChangeProgressRankMutation, ChangeProgressRankMutationVariables>;

/**
 * __useChangeProgressRankMutation__
 *
 * To run a mutation, you first call `useChangeProgressRankMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useChangeProgressRankMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [changeProgressRankMutation, { data, loading, error }] = useChangeProgressRankMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useChangeProgressRankMutation(baseOptions?: Apollo.MutationHookOptions<ChangeProgressRankMutation, ChangeProgressRankMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<ChangeProgressRankMutation, ChangeProgressRankMutationVariables>(ChangeProgressRankDocument, options);
      }
export type ChangeProgressRankMutationHookResult = ReturnType<typeof useChangeProgressRankMutation>;
export type ChangeProgressRankMutationResult = Apollo.MutationResult<ChangeProgressRankMutation>;
export type ChangeProgressRankMutationOptions = Apollo.BaseMutationOptions<ChangeProgressRankMutation, ChangeProgressRankMutationVariables>;
export const ChangeProgressStateDocument = gql`
    mutation changeProgressState($input: ChangeProgressStateInput!) {
  changeProgressState(input: $input) {
    id
  }
}
    `;
export type ChangeProgressStateMutationFn = Apollo.MutationFunction<ChangeProgressStateMutation, ChangeProgressStateMutationVariables>;

/**
 * __useChangeProgressStateMutation__
 *
 * To run a mutation, you first call `useChangeProgressStateMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useChangeProgressStateMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [changeProgressStateMutation, { data, loading, error }] = useChangeProgressStateMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useChangeProgressStateMutation(baseOptions?: Apollo.MutationHookOptions<ChangeProgressStateMutation, ChangeProgressStateMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<ChangeProgressStateMutation, ChangeProgressStateMutationVariables>(ChangeProgressStateDocument, options);
      }
export type ChangeProgressStateMutationHookResult = ReturnType<typeof useChangeProgressStateMutation>;
export type ChangeProgressStateMutationResult = Apollo.MutationResult<ChangeProgressStateMutation>;
export type ChangeProgressStateMutationOptions = Apollo.BaseMutationOptions<ChangeProgressStateMutation, ChangeProgressStateMutationVariables>;
export const CreateCommentDocument = gql`
    mutation createComment($input: CreateCommentInput!) {
  createComment(input: $input) {
    id
  }
}
    `;
export type CreateCommentMutationFn = Apollo.MutationFunction<CreateCommentMutation, CreateCommentMutationVariables>;

/**
 * __useCreateCommentMutation__
 *
 * To run a mutation, you first call `useCreateCommentMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useCreateCommentMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [createCommentMutation, { data, loading, error }] = useCreateCommentMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useCreateCommentMutation(baseOptions?: Apollo.MutationHookOptions<CreateCommentMutation, CreateCommentMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<CreateCommentMutation, CreateCommentMutationVariables>(CreateCommentDocument, options);
      }
export type CreateCommentMutationHookResult = ReturnType<typeof useCreateCommentMutation>;
export type CreateCommentMutationResult = Apollo.MutationResult<CreateCommentMutation>;
export type CreateCommentMutationOptions = Apollo.BaseMutationOptions<CreateCommentMutation, CreateCommentMutationVariables>;
export const UpdateCommentDocument = gql`
    mutation updateComment($input: UpdateCommentInput!) {
  updateComment(input: $input) {
    id
  }
}
    `;
export type UpdateCommentMutationFn = Apollo.MutationFunction<UpdateCommentMutation, UpdateCommentMutationVariables>;

/**
 * __useUpdateCommentMutation__
 *
 * To run a mutation, you first call `useUpdateCommentMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUpdateCommentMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [updateCommentMutation, { data, loading, error }] = useUpdateCommentMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useUpdateCommentMutation(baseOptions?: Apollo.MutationHookOptions<UpdateCommentMutation, UpdateCommentMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<UpdateCommentMutation, UpdateCommentMutationVariables>(UpdateCommentDocument, options);
      }
export type UpdateCommentMutationHookResult = ReturnType<typeof useUpdateCommentMutation>;
export type UpdateCommentMutationResult = Apollo.MutationResult<UpdateCommentMutation>;
export type UpdateCommentMutationOptions = Apollo.BaseMutationOptions<UpdateCommentMutation, UpdateCommentMutationVariables>;
export const DeleteCommentDocument = gql`
    mutation deleteComment($input: DeleteCommentInput!) {
  deleteComment(input: $input) {
    id
  }
}
    `;
export type DeleteCommentMutationFn = Apollo.MutationFunction<DeleteCommentMutation, DeleteCommentMutationVariables>;

/**
 * __useDeleteCommentMutation__
 *
 * To run a mutation, you first call `useDeleteCommentMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useDeleteCommentMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [deleteCommentMutation, { data, loading, error }] = useDeleteCommentMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useDeleteCommentMutation(baseOptions?: Apollo.MutationHookOptions<DeleteCommentMutation, DeleteCommentMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<DeleteCommentMutation, DeleteCommentMutationVariables>(DeleteCommentDocument, options);
      }
export type DeleteCommentMutationHookResult = ReturnType<typeof useDeleteCommentMutation>;
export type DeleteCommentMutationResult = Apollo.MutationResult<DeleteCommentMutation>;
export type DeleteCommentMutationOptions = Apollo.BaseMutationOptions<DeleteCommentMutation, DeleteCommentMutationVariables>;
export const ChangeProgressRecontactedOnDocument = gql`
    mutation changeProgressRecontactedOn($input: ChangeProgressRecontactedOnInput!) {
  changeProgressRecontactedOn(input: $input) {
    id
  }
}
    `;
export type ChangeProgressRecontactedOnMutationFn = Apollo.MutationFunction<ChangeProgressRecontactedOnMutation, ChangeProgressRecontactedOnMutationVariables>;

/**
 * __useChangeProgressRecontactedOnMutation__
 *
 * To run a mutation, you first call `useChangeProgressRecontactedOnMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useChangeProgressRecontactedOnMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [changeProgressRecontactedOnMutation, { data, loading, error }] = useChangeProgressRecontactedOnMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useChangeProgressRecontactedOnMutation(baseOptions?: Apollo.MutationHookOptions<ChangeProgressRecontactedOnMutation, ChangeProgressRecontactedOnMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<ChangeProgressRecontactedOnMutation, ChangeProgressRecontactedOnMutationVariables>(ChangeProgressRecontactedOnDocument, options);
      }
export type ChangeProgressRecontactedOnMutationHookResult = ReturnType<typeof useChangeProgressRecontactedOnMutation>;
export type ChangeProgressRecontactedOnMutationResult = Apollo.MutationResult<ChangeProgressRecontactedOnMutation>;
export type ChangeProgressRecontactedOnMutationOptions = Apollo.BaseMutationOptions<ChangeProgressRecontactedOnMutation, ChangeProgressRecontactedOnMutationVariables>;
export const UploadStaffIconDocument = gql`
    mutation uploadStaffIcon($input: StaffIconInput) {
  uploadStaffIcon(input: $input) {
    id
  }
}
    `;
export type UploadStaffIconMutationFn = Apollo.MutationFunction<UploadStaffIconMutation, UploadStaffIconMutationVariables>;

/**
 * __useUploadStaffIconMutation__
 *
 * To run a mutation, you first call `useUploadStaffIconMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUploadStaffIconMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [uploadStaffIconMutation, { data, loading, error }] = useUploadStaffIconMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useUploadStaffIconMutation(baseOptions?: Apollo.MutationHookOptions<UploadStaffIconMutation, UploadStaffIconMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<UploadStaffIconMutation, UploadStaffIconMutationVariables>(UploadStaffIconDocument, options);
      }
export type UploadStaffIconMutationHookResult = ReturnType<typeof useUploadStaffIconMutation>;
export type UploadStaffIconMutationResult = Apollo.MutationResult<UploadStaffIconMutation>;
export type UploadStaffIconMutationOptions = Apollo.BaseMutationOptions<UploadStaffIconMutation, UploadStaffIconMutationVariables>;
export const DeleteStaffIconDocument = gql`
    mutation deleteStaffIcon($input: StaffIDInput) {
  deleteStaffIcon(input: $input) {
    id
  }
}
    `;
export type DeleteStaffIconMutationFn = Apollo.MutationFunction<DeleteStaffIconMutation, DeleteStaffIconMutationVariables>;

/**
 * __useDeleteStaffIconMutation__
 *
 * To run a mutation, you first call `useDeleteStaffIconMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useDeleteStaffIconMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [deleteStaffIconMutation, { data, loading, error }] = useDeleteStaffIconMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useDeleteStaffIconMutation(baseOptions?: Apollo.MutationHookOptions<DeleteStaffIconMutation, DeleteStaffIconMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<DeleteStaffIconMutation, DeleteStaffIconMutationVariables>(DeleteStaffIconDocument, options);
      }
export type DeleteStaffIconMutationHookResult = ReturnType<typeof useDeleteStaffIconMutation>;
export type DeleteStaffIconMutationResult = Apollo.MutationResult<DeleteStaffIconMutation>;
export type DeleteStaffIconMutationOptions = Apollo.BaseMutationOptions<DeleteStaffIconMutation, DeleteStaffIconMutationVariables>;
export const ChangeStaffPasswordDocument = gql`
    mutation changeStaffPassword($input: StaffChangePasswordInput) {
  changeStaffPassword(input: $input) {
    id
  }
}
    `;
export type ChangeStaffPasswordMutationFn = Apollo.MutationFunction<ChangeStaffPasswordMutation, ChangeStaffPasswordMutationVariables>;

/**
 * __useChangeStaffPasswordMutation__
 *
 * To run a mutation, you first call `useChangeStaffPasswordMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useChangeStaffPasswordMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [changeStaffPasswordMutation, { data, loading, error }] = useChangeStaffPasswordMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useChangeStaffPasswordMutation(baseOptions?: Apollo.MutationHookOptions<ChangeStaffPasswordMutation, ChangeStaffPasswordMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<ChangeStaffPasswordMutation, ChangeStaffPasswordMutationVariables>(ChangeStaffPasswordDocument, options);
      }
export type ChangeStaffPasswordMutationHookResult = ReturnType<typeof useChangeStaffPasswordMutation>;
export type ChangeStaffPasswordMutationResult = Apollo.MutationResult<ChangeStaffPasswordMutation>;
export type ChangeStaffPasswordMutationOptions = Apollo.BaseMutationOptions<ChangeStaffPasswordMutation, ChangeStaffPasswordMutationVariables>;
export const GetMenusOnlyNameDocument = gql`
    query getMenusOnlyName {
  menus {
    id
    name
  }
}
    `;

/**
 * __useGetMenusOnlyNameQuery__
 *
 * To run a query within a React component, call `useGetMenusOnlyNameQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetMenusOnlyNameQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetMenusOnlyNameQuery({
 *   variables: {
 *   },
 * });
 */
export function useGetMenusOnlyNameQuery(baseOptions?: Apollo.QueryHookOptions<GetMenusOnlyNameQuery, GetMenusOnlyNameQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GetMenusOnlyNameQuery, GetMenusOnlyNameQueryVariables>(GetMenusOnlyNameDocument, options);
      }
export function useGetMenusOnlyNameLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetMenusOnlyNameQuery, GetMenusOnlyNameQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GetMenusOnlyNameQuery, GetMenusOnlyNameQueryVariables>(GetMenusOnlyNameDocument, options);
        }
export type GetMenusOnlyNameQueryHookResult = ReturnType<typeof useGetMenusOnlyNameQuery>;
export type GetMenusOnlyNameLazyQueryHookResult = ReturnType<typeof useGetMenusOnlyNameLazyQuery>;
export type GetMenusOnlyNameQueryResult = Apollo.QueryResult<GetMenusOnlyNameQuery, GetMenusOnlyNameQueryVariables>;
export const GetStaffsOnlyNameDocument = gql`
    query getStaffsOnlyName {
  staffs {
    id
    name
  }
}
    `;

/**
 * __useGetStaffsOnlyNameQuery__
 *
 * To run a query within a React component, call `useGetStaffsOnlyNameQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetStaffsOnlyNameQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetStaffsOnlyNameQuery({
 *   variables: {
 *   },
 * });
 */
export function useGetStaffsOnlyNameQuery(baseOptions?: Apollo.QueryHookOptions<GetStaffsOnlyNameQuery, GetStaffsOnlyNameQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GetStaffsOnlyNameQuery, GetStaffsOnlyNameQueryVariables>(GetStaffsOnlyNameDocument, options);
      }
export function useGetStaffsOnlyNameLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetStaffsOnlyNameQuery, GetStaffsOnlyNameQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GetStaffsOnlyNameQuery, GetStaffsOnlyNameQueryVariables>(GetStaffsOnlyNameDocument, options);
        }
export type GetStaffsOnlyNameQueryHookResult = ReturnType<typeof useGetStaffsOnlyNameQuery>;
export type GetStaffsOnlyNameLazyQueryHookResult = ReturnType<typeof useGetStaffsOnlyNameLazyQuery>;
export type GetStaffsOnlyNameQueryResult = Apollo.QueryResult<GetStaffsOnlyNameQuery, GetStaffsOnlyNameQueryVariables>;
export const GetStaffsListDocument = gql`
    query getStaffsList($page: Int, $per: Int) {
  staffsList(page: $page, per: $per) {
    staffs {
      id
      name
      email
      icon
      createdAt
      updatedAt
    }
    pageInfo {
      currentPage
      limit
      pagesCount
      recordsCount
    }
  }
}
    `;

/**
 * __useGetStaffsListQuery__
 *
 * To run a query within a React component, call `useGetStaffsListQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetStaffsListQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetStaffsListQuery({
 *   variables: {
 *      page: // value for 'page'
 *      per: // value for 'per'
 *   },
 * });
 */
export function useGetStaffsListQuery(baseOptions?: Apollo.QueryHookOptions<GetStaffsListQuery, GetStaffsListQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GetStaffsListQuery, GetStaffsListQueryVariables>(GetStaffsListDocument, options);
      }
export function useGetStaffsListLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetStaffsListQuery, GetStaffsListQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GetStaffsListQuery, GetStaffsListQueryVariables>(GetStaffsListDocument, options);
        }
export type GetStaffsListQueryHookResult = ReturnType<typeof useGetStaffsListQuery>;
export type GetStaffsListLazyQueryHookResult = ReturnType<typeof useGetStaffsListLazyQuery>;
export type GetStaffsListQueryResult = Apollo.QueryResult<GetStaffsListQuery, GetStaffsListQueryVariables>;
export const GetStaffByIdDocument = gql`
    query getStaffById($id: ID!) {
  staff(id: $id) {
    id
    name
    email
    icon
    createdAt
    updatedAt
  }
}
    `;

/**
 * __useGetStaffByIdQuery__
 *
 * To run a query within a React component, call `useGetStaffByIdQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetStaffByIdQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetStaffByIdQuery({
 *   variables: {
 *      id: // value for 'id'
 *   },
 * });
 */
export function useGetStaffByIdQuery(baseOptions: Apollo.QueryHookOptions<GetStaffByIdQuery, GetStaffByIdQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GetStaffByIdQuery, GetStaffByIdQueryVariables>(GetStaffByIdDocument, options);
      }
export function useGetStaffByIdLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetStaffByIdQuery, GetStaffByIdQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GetStaffByIdQuery, GetStaffByIdQueryVariables>(GetStaffByIdDocument, options);
        }
export type GetStaffByIdQueryHookResult = ReturnType<typeof useGetStaffByIdQuery>;
export type GetStaffByIdLazyQueryHookResult = ReturnType<typeof useGetStaffByIdLazyQuery>;
export type GetStaffByIdQueryResult = Apollo.QueryResult<GetStaffByIdQuery, GetStaffByIdQueryVariables>;
export const GetStaffbyEmailDocument = gql`
    query getStaffbyEmail($email: String!) {
  staffByEmail(email: $email) {
    id
    name
    email
    icon
    createdAt
    updatedAt
  }
}
    `;

/**
 * __useGetStaffbyEmailQuery__
 *
 * To run a query within a React component, call `useGetStaffbyEmailQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetStaffbyEmailQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetStaffbyEmailQuery({
 *   variables: {
 *      email: // value for 'email'
 *   },
 * });
 */
export function useGetStaffbyEmailQuery(baseOptions: Apollo.QueryHookOptions<GetStaffbyEmailQuery, GetStaffbyEmailQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GetStaffbyEmailQuery, GetStaffbyEmailQueryVariables>(GetStaffbyEmailDocument, options);
      }
export function useGetStaffbyEmailLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetStaffbyEmailQuery, GetStaffbyEmailQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GetStaffbyEmailQuery, GetStaffbyEmailQueryVariables>(GetStaffbyEmailDocument, options);
        }
export type GetStaffbyEmailQueryHookResult = ReturnType<typeof useGetStaffbyEmailQuery>;
export type GetStaffbyEmailLazyQueryHookResult = ReturnType<typeof useGetStaffbyEmailLazyQuery>;
export type GetStaffbyEmailQueryResult = Apollo.QueryResult<GetStaffbyEmailQuery, GetStaffbyEmailQueryVariables>;
export const GetUsersListDocument = gql`
    query getUsersList($fieldsCont: String, $order: String, $page: Int, $per: Int) {
  usersList(fieldsCont: $fieldsCont, order: $order, page: $page, per: $per) {
    pageInfo {
      currentPage
      limit
      pagesCount
      recordsCount
    }
    users {
      id
      companyName
      name
      email
      tel
      createdAt
      updatedAt
      address {
        postalCode
        prefecture
        city
        street
        building
        createdAt
        updatedAt
      }
    }
  }
}
    `;

/**
 * __useGetUsersListQuery__
 *
 * To run a query within a React component, call `useGetUsersListQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetUsersListQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetUsersListQuery({
 *   variables: {
 *      fieldsCont: // value for 'fieldsCont'
 *      order: // value for 'order'
 *      page: // value for 'page'
 *      per: // value for 'per'
 *   },
 * });
 */
export function useGetUsersListQuery(baseOptions?: Apollo.QueryHookOptions<GetUsersListQuery, GetUsersListQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GetUsersListQuery, GetUsersListQueryVariables>(GetUsersListDocument, options);
      }
export function useGetUsersListLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetUsersListQuery, GetUsersListQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GetUsersListQuery, GetUsersListQueryVariables>(GetUsersListDocument, options);
        }
export type GetUsersListQueryHookResult = ReturnType<typeof useGetUsersListQuery>;
export type GetUsersListLazyQueryHookResult = ReturnType<typeof useGetUsersListLazyQuery>;
export type GetUsersListQueryResult = Apollo.QueryResult<GetUsersListQuery, GetUsersListQueryVariables>;
export const GetUserByIdDocument = gql`
    query getUserById($userId: Int!) {
  user(id: $userId) {
    id
    companyName
    name
    email
    tel
    createdAt
    updatedAt
    address {
      id
      postalCode
      prefecture
      city
      street
      building
      createdAt
      updatedAt
    }
  }
}
    `;

/**
 * __useGetUserByIdQuery__
 *
 * To run a query within a React component, call `useGetUserByIdQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetUserByIdQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetUserByIdQuery({
 *   variables: {
 *      userId: // value for 'userId'
 *   },
 * });
 */
export function useGetUserByIdQuery(baseOptions: Apollo.QueryHookOptions<GetUserByIdQuery, GetUserByIdQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GetUserByIdQuery, GetUserByIdQueryVariables>(GetUserByIdDocument, options);
      }
export function useGetUserByIdLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetUserByIdQuery, GetUserByIdQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GetUserByIdQuery, GetUserByIdQueryVariables>(GetUserByIdDocument, options);
        }
export type GetUserByIdQueryHookResult = ReturnType<typeof useGetUserByIdQuery>;
export type GetUserByIdLazyQueryHookResult = ReturnType<typeof useGetUserByIdLazyQuery>;
export type GetUserByIdQueryResult = Apollo.QueryResult<GetUserByIdQuery, GetUserByIdQueryVariables>;
export const GetInquiriesListDocument = gql`
    query getInquiriesList($per: Int, $page: Int, $order: String, $fieldsCont: String, $staffId: Int, $state: ProgressStateEnum) {
  inquiriesList(
    per: $per
    page: $page
    order: $order
    fieldsCont: $fieldsCont
    staffId: $staffId
    state: $state
  ) {
    inquiries {
      id
      userId
      companyName
      name
      email
      tel
      numberOfUsers
      introductoryTerm
      detail
      createdAt
      updatedAt
      progress {
        id
        inquiryId
        staffId
        rank
        rankI18n
        state
        stateI18n
        recontactedOn
        contactedAt
        staff {
          name
        }
      }
      menus {
        id
        name
      }
    }
    pageInfo {
      currentPage
      limit
      pagesCount
      recordsCount
    }
  }
}
    `;

/**
 * __useGetInquiriesListQuery__
 *
 * To run a query within a React component, call `useGetInquiriesListQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetInquiriesListQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetInquiriesListQuery({
 *   variables: {
 *      per: // value for 'per'
 *      page: // value for 'page'
 *      order: // value for 'order'
 *      fieldsCont: // value for 'fieldsCont'
 *      staffId: // value for 'staffId'
 *      state: // value for 'state'
 *   },
 * });
 */
export function useGetInquiriesListQuery(baseOptions?: Apollo.QueryHookOptions<GetInquiriesListQuery, GetInquiriesListQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GetInquiriesListQuery, GetInquiriesListQueryVariables>(GetInquiriesListDocument, options);
      }
export function useGetInquiriesListLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetInquiriesListQuery, GetInquiriesListQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GetInquiriesListQuery, GetInquiriesListQueryVariables>(GetInquiriesListDocument, options);
        }
export type GetInquiriesListQueryHookResult = ReturnType<typeof useGetInquiriesListQuery>;
export type GetInquiriesListLazyQueryHookResult = ReturnType<typeof useGetInquiriesListLazyQuery>;
export type GetInquiriesListQueryResult = Apollo.QueryResult<GetInquiriesListQuery, GetInquiriesListQueryVariables>;
export const GetInquiryByIdDocument = gql`
    query getInquiryById($inquiryId: ID!) {
  inquiry(id: $inquiryId) {
    id
    userId
    companyName
    name
    email
    tel
    numberOfUsers
    introductoryTerm
    detail
    createdAt
    updatedAt
    progress {
      id
      inquiryId
      staffId
      rank
      rankI18n
      state
      stateI18n
      recontactedOn
      contactedAt
      selectableEvents {
        event
        label
      }
      staff {
        id
        name
        icon
      }
    }
    menus {
      id
      name
    }
    user {
      id
      companyName
      name
      email
      tel
      address {
        postalCode
        prefecture
        city
        street
        building
        createdAt
        updatedAt
      }
    }
  }
}
    `;

/**
 * __useGetInquiryByIdQuery__
 *
 * To run a query within a React component, call `useGetInquiryByIdQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetInquiryByIdQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetInquiryByIdQuery({
 *   variables: {
 *      inquiryId: // value for 'inquiryId'
 *   },
 * });
 */
export function useGetInquiryByIdQuery(baseOptions: Apollo.QueryHookOptions<GetInquiryByIdQuery, GetInquiryByIdQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GetInquiryByIdQuery, GetInquiryByIdQueryVariables>(GetInquiryByIdDocument, options);
      }
export function useGetInquiryByIdLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetInquiryByIdQuery, GetInquiryByIdQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GetInquiryByIdQuery, GetInquiryByIdQueryVariables>(GetInquiryByIdDocument, options);
        }
export type GetInquiryByIdQueryHookResult = ReturnType<typeof useGetInquiryByIdQuery>;
export type GetInquiryByIdLazyQueryHookResult = ReturnType<typeof useGetInquiryByIdLazyQuery>;
export type GetInquiryByIdQueryResult = Apollo.QueryResult<GetInquiryByIdQuery, GetInquiryByIdQueryVariables>;
export const GetProgressStateAndEventsDocument = gql`
    query getProgressStateAndEvents($progressId: ID!) {
  progress(id: $progressId) {
    id
    state
    stateI18n
    selectableEvents {
      event
      label
    }
  }
}
    `;

/**
 * __useGetProgressStateAndEventsQuery__
 *
 * To run a query within a React component, call `useGetProgressStateAndEventsQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetProgressStateAndEventsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetProgressStateAndEventsQuery({
 *   variables: {
 *      progressId: // value for 'progressId'
 *   },
 * });
 */
export function useGetProgressStateAndEventsQuery(baseOptions: Apollo.QueryHookOptions<GetProgressStateAndEventsQuery, GetProgressStateAndEventsQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GetProgressStateAndEventsQuery, GetProgressStateAndEventsQueryVariables>(GetProgressStateAndEventsDocument, options);
      }
export function useGetProgressStateAndEventsLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetProgressStateAndEventsQuery, GetProgressStateAndEventsQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GetProgressStateAndEventsQuery, GetProgressStateAndEventsQueryVariables>(GetProgressStateAndEventsDocument, options);
        }
export type GetProgressStateAndEventsQueryHookResult = ReturnType<typeof useGetProgressStateAndEventsQuery>;
export type GetProgressStateAndEventsLazyQueryHookResult = ReturnType<typeof useGetProgressStateAndEventsLazyQuery>;
export type GetProgressStateAndEventsQueryResult = Apollo.QueryResult<GetProgressStateAndEventsQuery, GetProgressStateAndEventsQueryVariables>;
export const GetCommentsDocument = gql`
    query getComments($inquiryId: Int, $order: String) {
  comments(inquiryId: $inquiryId, order: $order) {
    id
    content
    createdAt
    staff {
      id
      name
      icon
    }
  }
}
    `;

/**
 * __useGetCommentsQuery__
 *
 * To run a query within a React component, call `useGetCommentsQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetCommentsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetCommentsQuery({
 *   variables: {
 *      inquiryId: // value for 'inquiryId'
 *      order: // value for 'order'
 *   },
 * });
 */
export function useGetCommentsQuery(baseOptions?: Apollo.QueryHookOptions<GetCommentsQuery, GetCommentsQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GetCommentsQuery, GetCommentsQueryVariables>(GetCommentsDocument, options);
      }
export function useGetCommentsLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetCommentsQuery, GetCommentsQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GetCommentsQuery, GetCommentsQueryVariables>(GetCommentsDocument, options);
        }
export type GetCommentsQueryHookResult = ReturnType<typeof useGetCommentsQuery>;
export type GetCommentsLazyQueryHookResult = ReturnType<typeof useGetCommentsLazyQuery>;
export type GetCommentsQueryResult = Apollo.QueryResult<GetCommentsQuery, GetCommentsQueryVariables>;