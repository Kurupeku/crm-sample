import { gql } from '@apollo/client';
import * as Apollo from '@apollo/client';
export type Maybe<T> = T | null;
export type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };
const defaultOptions =  {}
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: string;
  String: string;
  Boolean: boolean;
  Int: number;
  Float: number;
};

export type Address = {
  __typename?: 'Address';
  building?: Maybe<Scalars['String']>;
  city: Scalars['String'];
  createdAt: Scalars['Int'];
  fullAddress: Scalars['String'];
  fullAddressWithPostalCode: Scalars['String'];
  id: Scalars['ID'];
  postalCode: Scalars['String'];
  prefecture: Scalars['String'];
  street: Scalars['String'];
  updatedAt: Scalars['Int'];
  userId: Scalars['Int'];
};

/** Autogenerated input type of ChangeProgressRank */
export type ChangeProgressRankInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  id: Scalars['ID'];
  rank: ProgressRankEnum;
};

/** Autogenerated input type of ChangeProgressStaff */
export type ChangeProgressStaffInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  id: Scalars['ID'];
  staffId: Scalars['Int'];
};

/** Autogenerated input type of ChangeProgressState */
export type ChangeProgressStateInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  event: ProgressEventEnum;
  id: Scalars['ID'];
};

export type Comment = {
  __typename?: 'Comment';
  content: Scalars['String'];
  createdAt: Scalars['Int'];
  id: Scalars['ID'];
  inquiry: Inquiry;
  inquiryId: Scalars['Int'];
  staff?: Maybe<Staff>;
  updatedAt: Scalars['Int'];
  user?: Maybe<User>;
  userId: Scalars['Int'];
};

export type CommentsList = {
  __typename?: 'CommentsList';
  comments: Array<Comment>;
  pageInfo: PageInfo;
};

export type CreateAddressInput = {
  building?: Maybe<Scalars['String']>;
  city: Scalars['String'];
  postalCode: Scalars['String'];
  prefecture: Scalars['String'];
  street: Scalars['String'];
};

/** Autogenerated input type of CreateComment */
export type CreateCommentInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  content: Scalars['String'];
  inquiryId: Scalars['Int'];
  userId: Scalars['Int'];
};

/** Autogenerated input type of CreateInquiry */
export type CreateInquiryInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  companyName?: Maybe<Scalars['String']>;
  detail?: Maybe<Scalars['String']>;
  email: Scalars['String'];
  introductoryTerm: Scalars['String'];
  menuIds?: Maybe<Array<Scalars['Int']>>;
  name: Scalars['String'];
  numberOfUsers: Scalars['Int'];
  progress?: Maybe<CreateProgressInput>;
  tel: Scalars['String'];
  userId?: Maybe<Scalars['Int']>;
};

/** Autogenerated input type of CreateMenu */
export type CreateMenuInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  name: Scalars['String'];
  publishedOn?: Maybe<Scalars['String']>;
};

export type CreateProgressInput = {
  rank?: Maybe<Scalars['Int']>;
  staffId?: Maybe<Scalars['Int']>;
  state?: Maybe<Scalars['String']>;
};

/** Autogenerated input type of CreateUser */
export type CreateUserInput = {
  address: CreateAddressInput;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  companyName?: Maybe<Scalars['String']>;
  email: Scalars['String'];
  name: Scalars['String'];
  tel: Scalars['String'];
};

/** Autogenerated input type of DeleteComment */
export type DeleteCommentInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  id: Scalars['ID'];
};

/** Autogenerated input type of DeleteInquiry */
export type DeleteInquiryInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  id: Scalars['ID'];
};

/** Autogenerated input type of DeleteMenu */
export type DeleteMenuInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  id: Scalars['ID'];
};

/** Autogenerated input type of DeleteUser */
export type DeleteUserInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  id: Scalars['ID'];
};

export type InquiriesList = {
  __typename?: 'InquiriesList';
  inquiries: Array<Inquiry>;
  pageInfo: PageInfo;
};

export type Inquiry = {
  __typename?: 'Inquiry';
  comments: Array<Comment>;
  companyName?: Maybe<Scalars['String']>;
  createdAt: Scalars['Int'];
  detail?: Maybe<Scalars['String']>;
  email: Scalars['String'];
  id: Scalars['ID'];
  introductoryTerm: Scalars['String'];
  menus: Array<Menu>;
  name: Scalars['String'];
  numberOfUsers: Scalars['Int'];
  progress: Progress;
  tel: Scalars['String'];
  updatedAt: Scalars['Int'];
  user?: Maybe<User>;
  userId?: Maybe<Scalars['Int']>;
};

export type Menu = {
  __typename?: 'Menu';
  createdAt: Scalars['Int'];
  id: Scalars['ID'];
  inquiries: Array<Inquiry>;
  name: Scalars['String'];
  publishedOn?: Maybe<Scalars['String']>;
  updatedAt: Scalars['Int'];
};

export type MenusList = {
  __typename?: 'MenusList';
  menus: Array<Menu>;
  pageInfo: PageInfo;
};

export type Mutation = {
  __typename?: 'Mutation';
  changeProgressRank?: Maybe<Progress>;
  changeProgressStaff?: Maybe<Progress>;
  changeProgressState?: Maybe<Progress>;
  changeStaffPassword: Staff;
  createComment?: Maybe<Comment>;
  createInquiry?: Maybe<Inquiry>;
  createMenu?: Maybe<Menu>;
  createStaff: Staff;
  createUser?: Maybe<User>;
  deleteComment?: Maybe<Comment>;
  deleteInquiry?: Maybe<Inquiry>;
  deleteMenu?: Maybe<Menu>;
  deleteStaff: Staff;
  deleteStaffIcon: Staff;
  deleteUser?: Maybe<User>;
  updateComment?: Maybe<Comment>;
  updateInquiry?: Maybe<Inquiry>;
  updateMenu?: Maybe<Menu>;
  updateStaff: Staff;
  updateUser?: Maybe<User>;
  uploadStaffIcon: Staff;
};


export type MutationChangeProgressRankArgs = {
  input: ChangeProgressRankInput;
};


export type MutationChangeProgressStaffArgs = {
  input: ChangeProgressStaffInput;
};


export type MutationChangeProgressStateArgs = {
  input: ChangeProgressStateInput;
};


export type MutationChangeStaffPasswordArgs = {
  input?: Maybe<StaffChangePasswordInput>;
};


export type MutationCreateCommentArgs = {
  input: CreateCommentInput;
};


export type MutationCreateInquiryArgs = {
  input: CreateInquiryInput;
};


export type MutationCreateMenuArgs = {
  input: CreateMenuInput;
};


export type MutationCreateStaffArgs = {
  input?: Maybe<NewStaffInput>;
};


export type MutationCreateUserArgs = {
  input: CreateUserInput;
};


export type MutationDeleteCommentArgs = {
  input: DeleteCommentInput;
};


export type MutationDeleteInquiryArgs = {
  input: DeleteInquiryInput;
};


export type MutationDeleteMenuArgs = {
  input: DeleteMenuInput;
};


export type MutationDeleteStaffArgs = {
  input?: Maybe<StaffIdInput>;
};


export type MutationDeleteStaffIconArgs = {
  input?: Maybe<StaffIdInput>;
};


export type MutationDeleteUserArgs = {
  input: DeleteUserInput;
};


export type MutationUpdateCommentArgs = {
  input: UpdateCommentInput;
};


export type MutationUpdateInquiryArgs = {
  input: UpdateInquiryInput;
};


export type MutationUpdateMenuArgs = {
  input: UpdateMenuInput;
};


export type MutationUpdateStaffArgs = {
  input?: Maybe<StaffInput>;
};


export type MutationUpdateUserArgs = {
  input: UpdateUserInput;
};


export type MutationUploadStaffIconArgs = {
  input?: Maybe<StaffIconInput>;
};

export type NewStaffInput = {
  email: Scalars['String'];
  name: Scalars['String'];
  password: Scalars['String'];
};

export type PageInfo = {
  __typename?: 'PageInfo';
  currentPage: Scalars['Int'];
  limit: Scalars['Int'];
  pagesCount: Scalars['Int'];
  recordsCount: Scalars['Int'];
};

export type Progress = {
  __typename?: 'Progress';
  contactedAt?: Maybe<Scalars['Int']>;
  createdAt: Scalars['Int'];
  id: Scalars['ID'];
  inquiry: Inquiry;
  inquiryId: Scalars['Int'];
  rank: Scalars['String'];
  recontactedOn?: Maybe<Scalars['String']>;
  selectableEvents: Array<ProgressEvent>;
  staff: Staff;
  staffId?: Maybe<Scalars['Int']>;
  state?: Maybe<Scalars['String']>;
  updatedAt: Scalars['Int'];
};

export type ProgressEvent = {
  __typename?: 'ProgressEvent';
  event: Scalars['String'];
  label: Scalars['String'];
};

export enum ProgressEventEnum {
  Archive = 'archive',
  Contact = 'contact',
  Contacted = 'contacted',
  Order = 'order',
  Recontact = 'recontact'
}

export enum ProgressRankEnum {
  A = 'a',
  B = 'b',
  C = 'c',
  D = 'd'
}

export enum ProgressStateEnum {
  Archived = 'archived',
  Contacting = 'contacting',
  Estimating = 'estimating',
  Ordered = 'ordered',
  Waiting = 'waiting',
  WaitingRecontact = 'waiting_recontact'
}

export type ProgressesList = {
  __typename?: 'ProgressesList';
  pageInfo: PageInfo;
  progresses: Array<Progress>;
};

export type Query = {
  __typename?: 'Query';
  comment?: Maybe<Inquiry>;
  comments: Array<Comment>;
  commentsList: CommentsList;
  inquiries: Array<Inquiry>;
  inquiriesList: InquiriesList;
  menu?: Maybe<Menu>;
  menus: Array<Menu>;
  menusList: MenusList;
  progress?: Maybe<Progress>;
  progresses: Array<Progress>;
  progressesList: ProgressesList;
  staff: Staff;
  staffByEmail: Staff;
  staffs: Array<Staff>;
  staffsList: StaffsList;
  user?: Maybe<User>;
  users: Array<User>;
  usersList: UsersList;
};


export type QueryCommentArgs = {
  id: Scalars['ID'];
};


export type QueryCommentsArgs = {
  order?: Maybe<Scalars['String']>;
};


export type QueryCommentsListArgs = {
  order?: Maybe<Scalars['String']>;
  page?: Maybe<Scalars['Int']>;
  per?: Maybe<Scalars['Int']>;
};


export type QueryInquiriesArgs = {
  fieldsCont?: Maybe<Scalars['String']>;
  order?: Maybe<Scalars['String']>;
  staffId?: Maybe<Scalars['Int']>;
};


export type QueryInquiriesListArgs = {
  fieldsCont?: Maybe<Scalars['String']>;
  order?: Maybe<Scalars['String']>;
  page?: Maybe<Scalars['Int']>;
  per?: Maybe<Scalars['Int']>;
  staffId?: Maybe<Scalars['Int']>;
};


export type QueryMenuArgs = {
  id: Scalars['ID'];
};


export type QueryMenusArgs = {
  order?: Maybe<Scalars['String']>;
};


export type QueryMenusListArgs = {
  order?: Maybe<Scalars['String']>;
  page?: Maybe<Scalars['Int']>;
  per?: Maybe<Scalars['Int']>;
};


export type QueryProgressArgs = {
  id: Scalars['ID'];
};


export type QueryProgressesArgs = {
  order?: Maybe<Scalars['String']>;
  rank?: Maybe<ProgressRankEnum>;
  staffId?: Maybe<Scalars['Int']>;
  state?: Maybe<ProgressStateEnum>;
};


export type QueryProgressesListArgs = {
  order?: Maybe<Scalars['String']>;
  page?: Maybe<Scalars['Int']>;
  per?: Maybe<Scalars['Int']>;
  rank?: Maybe<ProgressRankEnum>;
  staffId?: Maybe<Scalars['Int']>;
  state?: Maybe<ProgressStateEnum>;
};


export type QueryStaffArgs = {
  id: Scalars['ID'];
};


export type QueryStaffByEmailArgs = {
  email: Scalars['String'];
};


export type QueryStaffsListArgs = {
  page?: Maybe<Scalars['Int']>;
  per?: Maybe<Scalars['Int']>;
};


export type QueryUserArgs = {
  id: Scalars['Int'];
};


export type QueryUsersArgs = {
  fieldsCont?: Maybe<Scalars['String']>;
  order?: Maybe<Scalars['String']>;
};


export type QueryUsersListArgs = {
  fieldsCont?: Maybe<Scalars['String']>;
  order?: Maybe<Scalars['String']>;
  page?: Maybe<Scalars['Int']>;
  per?: Maybe<Scalars['Int']>;
};

export type Staff = {
  __typename?: 'Staff';
  comments: Array<Comment>;
  createdAt: Scalars['String'];
  email: Scalars['String'];
  icon?: Maybe<Scalars['String']>;
  id: Scalars['ID'];
  name: Scalars['String'];
  progresses: Array<Progress>;
  updatedAt: Scalars['String'];
};

export type StaffChangePasswordInput = {
  id: Scalars['ID'];
  newPassword: Scalars['String'];
  password: Scalars['String'];
};

export type StaffIdInput = {
  id: Scalars['ID'];
};

export type StaffIconInput = {
  icon: Scalars['String'];
  id: Scalars['ID'];
};

export type StaffInput = {
  email?: Maybe<Scalars['String']>;
  id: Scalars['ID'];
  name?: Maybe<Scalars['String']>;
};

export type StaffPageInfo = {
  __typename?: 'StaffPageInfo';
  currentPage: Scalars['Int'];
  limit: Scalars['Int'];
  pageCount: Scalars['Int'];
  recordCount: Scalars['Int'];
};

export type StaffsList = {
  __typename?: 'StaffsList';
  pageInfo: StaffPageInfo;
  staffs: Array<Staff>;
};

export type UpdateAddressInput = {
  building?: Maybe<Scalars['String']>;
  city: Scalars['String'];
  postalCode: Scalars['String'];
  prefecture: Scalars['String'];
  street: Scalars['String'];
};

/** Autogenerated input type of UpdateComment */
export type UpdateCommentInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  content: Scalars['String'];
  id: Scalars['ID'];
};

/** Autogenerated input type of UpdateInquiry */
export type UpdateInquiryInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  companyName?: Maybe<Scalars['String']>;
  detail?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  id: Scalars['ID'];
  introductoryTerm?: Maybe<Scalars['String']>;
  menuIds?: Maybe<Array<Scalars['Int']>>;
  name?: Maybe<Scalars['String']>;
  numberOfUsers?: Maybe<Scalars['Int']>;
  progress?: Maybe<UpdateProgressInput>;
  tel?: Maybe<Scalars['String']>;
  userId?: Maybe<Scalars['Int']>;
};

/** Autogenerated input type of UpdateMenu */
export type UpdateMenuInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  id: Scalars['ID'];
  name?: Maybe<Scalars['String']>;
  publishedOn?: Maybe<Scalars['String']>;
};

export type UpdateProgressInput = {
  rank?: Maybe<Scalars['Int']>;
  staffId?: Maybe<Scalars['Int']>;
  state?: Maybe<Scalars['String']>;
};

/** Autogenerated input type of UpdateUser */
export type UpdateUserInput = {
  address?: Maybe<UpdateAddressInput>;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  companyName?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  id: Scalars['ID'];
  name?: Maybe<Scalars['String']>;
  tel?: Maybe<Scalars['String']>;
};

export type User = {
  __typename?: 'User';
  address: Address;
  comments: Array<Comment>;
  companyName?: Maybe<Scalars['String']>;
  createdAt: Scalars['Int'];
  email: Scalars['String'];
  id: Scalars['ID'];
  inquiries: Array<Inquiry>;
  name: Scalars['String'];
  tel: Scalars['String'];
  updatedAt: Scalars['Int'];
};

export type UsersList = {
  __typename?: 'UsersList';
  pageInfo: PageInfo;
  users: Array<User>;
};

export type CreateStaffMutationVariables = Exact<{
  input?: Maybe<NewStaffInput>;
}>;


export type CreateStaffMutation = { __typename?: 'Mutation', createStaff: { __typename?: 'Staff', id: string } };

export type UpdateStaffMutationVariables = Exact<{
  input?: Maybe<StaffInput>;
}>;


export type UpdateStaffMutation = { __typename?: 'Mutation', updateStaff: { __typename?: 'Staff', id: string } };

export type DeleteStaffMutationVariables = Exact<{
  input?: Maybe<StaffIdInput>;
}>;


export type DeleteStaffMutation = { __typename?: 'Mutation', deleteStaff: { __typename?: 'Staff', id: string } };

export type GetStaffsQueryVariables = Exact<{ [key: string]: never; }>;


export type GetStaffsQuery = { __typename?: 'Query', staffs: Array<{ __typename?: 'Staff', id: string, name: string, email: string, icon?: string | null | undefined, createdAt: string, updatedAt: string }> };

export type GetStaffsListQueryVariables = Exact<{
  page?: Maybe<Scalars['Int']>;
  per?: Maybe<Scalars['Int']>;
}>;


export type GetStaffsListQuery = { __typename?: 'Query', staffsList: { __typename?: 'StaffsList', staffs: Array<{ __typename?: 'Staff', id: string, name: string, email: string, icon?: string | null | undefined, createdAt: string, updatedAt: string }>, pageInfo: { __typename?: 'StaffPageInfo', currentPage: number, limit: number, pageCount: number, recordCount: number } } };

export type GetStaffByIdQueryVariables = Exact<{
  id: Scalars['ID'];
}>;


export type GetStaffByIdQuery = { __typename?: 'Query', staff: { __typename?: 'Staff', id: string, name: string, email: string, icon?: string | null | undefined, createdAt: string, updatedAt: string } };

export type GetStaffbyEmailQueryVariables = Exact<{
  email: Scalars['String'];
}>;


export type GetStaffbyEmailQuery = { __typename?: 'Query', staffByEmail: { __typename?: 'Staff', id: string, name: string, email: string, icon?: string | null | undefined, createdAt: string, updatedAt: string } };


export const CreateStaffDocument = gql`
    mutation createStaff($input: NewStaffInput) {
  createStaff(input: $input) {
    id
  }
}
    `;
export type CreateStaffMutationFn = Apollo.MutationFunction<CreateStaffMutation, CreateStaffMutationVariables>;

/**
 * __useCreateStaffMutation__
 *
 * To run a mutation, you first call `useCreateStaffMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useCreateStaffMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [createStaffMutation, { data, loading, error }] = useCreateStaffMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useCreateStaffMutation(baseOptions?: Apollo.MutationHookOptions<CreateStaffMutation, CreateStaffMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<CreateStaffMutation, CreateStaffMutationVariables>(CreateStaffDocument, options);
      }
export type CreateStaffMutationHookResult = ReturnType<typeof useCreateStaffMutation>;
export type CreateStaffMutationResult = Apollo.MutationResult<CreateStaffMutation>;
export type CreateStaffMutationOptions = Apollo.BaseMutationOptions<CreateStaffMutation, CreateStaffMutationVariables>;
export const UpdateStaffDocument = gql`
    mutation updateStaff($input: StaffInput) {
  updateStaff(input: $input) {
    id
  }
}
    `;
export type UpdateStaffMutationFn = Apollo.MutationFunction<UpdateStaffMutation, UpdateStaffMutationVariables>;

/**
 * __useUpdateStaffMutation__
 *
 * To run a mutation, you first call `useUpdateStaffMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUpdateStaffMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [updateStaffMutation, { data, loading, error }] = useUpdateStaffMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useUpdateStaffMutation(baseOptions?: Apollo.MutationHookOptions<UpdateStaffMutation, UpdateStaffMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<UpdateStaffMutation, UpdateStaffMutationVariables>(UpdateStaffDocument, options);
      }
export type UpdateStaffMutationHookResult = ReturnType<typeof useUpdateStaffMutation>;
export type UpdateStaffMutationResult = Apollo.MutationResult<UpdateStaffMutation>;
export type UpdateStaffMutationOptions = Apollo.BaseMutationOptions<UpdateStaffMutation, UpdateStaffMutationVariables>;
export const DeleteStaffDocument = gql`
    mutation deleteStaff($input: StaffIDInput) {
  deleteStaff(input: $input) {
    id
  }
}
    `;
export type DeleteStaffMutationFn = Apollo.MutationFunction<DeleteStaffMutation, DeleteStaffMutationVariables>;

/**
 * __useDeleteStaffMutation__
 *
 * To run a mutation, you first call `useDeleteStaffMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useDeleteStaffMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [deleteStaffMutation, { data, loading, error }] = useDeleteStaffMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useDeleteStaffMutation(baseOptions?: Apollo.MutationHookOptions<DeleteStaffMutation, DeleteStaffMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<DeleteStaffMutation, DeleteStaffMutationVariables>(DeleteStaffDocument, options);
      }
export type DeleteStaffMutationHookResult = ReturnType<typeof useDeleteStaffMutation>;
export type DeleteStaffMutationResult = Apollo.MutationResult<DeleteStaffMutation>;
export type DeleteStaffMutationOptions = Apollo.BaseMutationOptions<DeleteStaffMutation, DeleteStaffMutationVariables>;
export const GetStaffsDocument = gql`
    query getStaffs {
  staffs {
    id
    name
    email
    icon
    createdAt
    updatedAt
  }
}
    `;

/**
 * __useGetStaffsQuery__
 *
 * To run a query within a React component, call `useGetStaffsQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetStaffsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetStaffsQuery({
 *   variables: {
 *   },
 * });
 */
export function useGetStaffsQuery(baseOptions?: Apollo.QueryHookOptions<GetStaffsQuery, GetStaffsQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GetStaffsQuery, GetStaffsQueryVariables>(GetStaffsDocument, options);
      }
export function useGetStaffsLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetStaffsQuery, GetStaffsQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GetStaffsQuery, GetStaffsQueryVariables>(GetStaffsDocument, options);
        }
export type GetStaffsQueryHookResult = ReturnType<typeof useGetStaffsQuery>;
export type GetStaffsLazyQueryHookResult = ReturnType<typeof useGetStaffsLazyQuery>;
export type GetStaffsQueryResult = Apollo.QueryResult<GetStaffsQuery, GetStaffsQueryVariables>;
export const GetStaffsListDocument = gql`
    query getStaffsList($page: Int, $per: Int) {
  staffsList(page: $page, per: $per) {
    staffs {
      id
      name
      email
      icon
      createdAt
      updatedAt
    }
    pageInfo {
      currentPage
      limit
      pageCount
      recordCount
    }
  }
}
    `;

/**
 * __useGetStaffsListQuery__
 *
 * To run a query within a React component, call `useGetStaffsListQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetStaffsListQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetStaffsListQuery({
 *   variables: {
 *      page: // value for 'page'
 *      per: // value for 'per'
 *   },
 * });
 */
export function useGetStaffsListQuery(baseOptions?: Apollo.QueryHookOptions<GetStaffsListQuery, GetStaffsListQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GetStaffsListQuery, GetStaffsListQueryVariables>(GetStaffsListDocument, options);
      }
export function useGetStaffsListLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetStaffsListQuery, GetStaffsListQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GetStaffsListQuery, GetStaffsListQueryVariables>(GetStaffsListDocument, options);
        }
export type GetStaffsListQueryHookResult = ReturnType<typeof useGetStaffsListQuery>;
export type GetStaffsListLazyQueryHookResult = ReturnType<typeof useGetStaffsListLazyQuery>;
export type GetStaffsListQueryResult = Apollo.QueryResult<GetStaffsListQuery, GetStaffsListQueryVariables>;
export const GetStaffByIdDocument = gql`
    query getStaffById($id: ID!) {
  staff(id: $id) {
    id
    name
    email
    icon
    createdAt
    updatedAt
  }
}
    `;

/**
 * __useGetStaffByIdQuery__
 *
 * To run a query within a React component, call `useGetStaffByIdQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetStaffByIdQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetStaffByIdQuery({
 *   variables: {
 *      id: // value for 'id'
 *   },
 * });
 */
export function useGetStaffByIdQuery(baseOptions: Apollo.QueryHookOptions<GetStaffByIdQuery, GetStaffByIdQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GetStaffByIdQuery, GetStaffByIdQueryVariables>(GetStaffByIdDocument, options);
      }
export function useGetStaffByIdLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetStaffByIdQuery, GetStaffByIdQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GetStaffByIdQuery, GetStaffByIdQueryVariables>(GetStaffByIdDocument, options);
        }
export type GetStaffByIdQueryHookResult = ReturnType<typeof useGetStaffByIdQuery>;
export type GetStaffByIdLazyQueryHookResult = ReturnType<typeof useGetStaffByIdLazyQuery>;
export type GetStaffByIdQueryResult = Apollo.QueryResult<GetStaffByIdQuery, GetStaffByIdQueryVariables>;
export const GetStaffbyEmailDocument = gql`
    query getStaffbyEmail($email: String!) {
  staffByEmail(email: $email) {
    id
    name
    email
    icon
    createdAt
    updatedAt
  }
}
    `;

/**
 * __useGetStaffbyEmailQuery__
 *
 * To run a query within a React component, call `useGetStaffbyEmailQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetStaffbyEmailQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetStaffbyEmailQuery({
 *   variables: {
 *      email: // value for 'email'
 *   },
 * });
 */
export function useGetStaffbyEmailQuery(baseOptions: Apollo.QueryHookOptions<GetStaffbyEmailQuery, GetStaffbyEmailQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GetStaffbyEmailQuery, GetStaffbyEmailQueryVariables>(GetStaffbyEmailDocument, options);
      }
export function useGetStaffbyEmailLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetStaffbyEmailQuery, GetStaffbyEmailQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GetStaffbyEmailQuery, GetStaffbyEmailQueryVariables>(GetStaffbyEmailDocument, options);
        }
export type GetStaffbyEmailQueryHookResult = ReturnType<typeof useGetStaffbyEmailQuery>;
export type GetStaffbyEmailLazyQueryHookResult = ReturnType<typeof useGetStaffbyEmailLazyQuery>;
export type GetStaffbyEmailQueryResult = Apollo.QueryResult<GetStaffbyEmailQuery, GetStaffbyEmailQueryVariables>;