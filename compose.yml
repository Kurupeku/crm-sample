version: "3"

services:
  db:
    image: postgres:13.4-alpine
    volumes:
      - postgres-data:/var/lib/postgresql/data
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_HOST: db
      PGDATA: /var/lib/postgresql/data/pgdata
      POSTGRES_HOST_AUTH_METHOD: trust

  client:
    build:
      context: ./client
      dockerfile: Dockerfile
      target: dev
    volumes:
      - ./client:/app
      - ./client/node_modules:/app/node_modules
    ports:
      - "8080:3000"
    depends_on:
      gateway:
        condition: service_healthy
      federation:
        condition: service_healthy
    env_file: ./.env

  gateway:
    build:
      context: ./gateway
      dockerfile: Dockerfile
      target: dev
    volumes:
      - ./gateway:/go/src/app
    tty: true
    stdin_open: true
    ports:
      - 2000:2000
    depends_on:
      staff_api:
        condition: service_healthy
      federation:
        condition: service_healthy
    env_file: ./.env
    healthcheck:
      test:
        [
          "CMD-SHELL",
          'wget --header="Content-Type: application/json" -q -O - http://localhost:2000/health_check || exit 1',
        ]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 5s

  federation:
    build:
      context: ./federation
      dockerfile: Dockerfile
      target: dev
    volumes:
      - ./federation:/app
      - ./federation/node_modules:/app/node_modules
    ports:
      - "3000:3000"
    links:
      - staff_api:staff_api
      - user_api:user_api
      - inquiry_api:inquiry_api
    depends_on:
      staff_api:
        condition: service_healthy
      user_api:
        condition: service_healthy
      inquiry_api:
        condition: service_healthy
    env_file: ./.env
    command: npm run dev
    healthcheck:
      test:
        [
          "CMD-SHELL",
          'wget --header="Content-Type: application/json" -q -O - http://localhost:3000/.well-known/apollo/server-health || exit 1',
        ]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 5s

  auth_api:
    build:
      context: ./auth_api
      dockerfile: Dockerfile
      target: dev
    volumes:
      - ./auth_api:/app
    tty: true
    stdin_open: true
    ports:
      - 50051:50051
    depends_on:
      - db
    env_file: ./.env
    healthcheck:
      test:
        [
          "CMD-SHELL",
          'wget --header="Content-Type: application/json" -q -O - http://localhost:3001/health_check || exit 1',
        ]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 5s

  staff_api:
    build:
      context: ./staff_api
      dockerfile: Dockerfile
      target: dev
    volumes:
      - ./staff_api:/go/src/app
    tty: true
    stdin_open: true
    ports:
      - 3001:3001
    depends_on:
      - db
    env_file: ./.env
    healthcheck:
      test:
        [
          "CMD-SHELL",
          'wget --header="Content-Type: application/json" -q -O - http://localhost:3001/health_check || exit 1',
        ]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 5s

  user_api:
    build:
      context: ./user_api
      dockerfile: Dockerfile
      target: dev
    volumes:
      - ./user_api:/usr/src/app
    ports:
      - "3002:3002"
    depends_on:
      - db
    env_file: ./.env
    healthcheck:
      test:
        [
          "CMD-SHELL",
          'wget --header="Content-Type: application/json" -q -O - http://localhost:3002/health_check || exit 1',
        ]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 20s

  inquiry_api:
    build:
      context: ./inquiry_api
      dockerfile: Dockerfile
      target: dev
    volumes:
      - ./inquiry_api:/usr/src/app
    ports:
      - "3003:3003"
    depends_on:
      - db
    env_file: ./.env
    healthcheck:
      test:
        [
          "CMD-SHELL",
          'wget --header="Content-Type: application/json" -q -O - http://localhost:3003/health_check || exit 1',
        ]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 20s

  batch:
    build:
      context: ./batch
      dockerfile: Dockerfile
      target: dev
    volumes:
      - ./batch:/go/src/app
    depends_on:
      - db
    env_file: ./.env

volumes:
  postgres-data:
